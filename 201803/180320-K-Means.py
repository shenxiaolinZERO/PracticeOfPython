# !/usr/bin/env python
# encoding: utf-8
__author__ = 'Administrator'

# kmeans应用实例

# 问题定义
#  聚类问题是数据挖掘的基本问题，它的本质是将n个数据对象划分为 k个聚类，以便使得所获得的聚类满足以下条件：
#   同一聚类中的数据对象相似度较高；
#   不同聚类中的对象相似度较小。
#  相似度可以根据问题的性质进行数学定义。
#  K-means算法就是解决这类问题的经典聚类算法
#  它的基本思想是以空间中k个点为中心，进行聚类，对最靠近他们的对象归类。
#   通过迭代的方法，逐次更新各聚类中心的值，直至得到最好的聚类结果
# 其IPO描述如下：
#  输入：N个数据
#  操作：聚类算法
#  输出：图形化显示聚类结果

# K-means算法步骤为：
#  从 n个数据对象任意选择 k 个对象作为初始聚类中心；并设定最大迭代次数
#  计算每个对象与k个中心点的距离，并根据最小距离对相应对象进行划分，
#   即，把对象划分到与他们最近的中心所代表的类别中去；
#  对于每一个中心点，遍历他们所包含的对象，计算这些对象所有维度的和的均值，获得新的中心点；
#  如果聚类中心与上次迭代之前相比，有所改变，
#    或者，算法迭代次数小于给定的最大迭代次数，则继续执行第2、3两步，否则，程序结束返回聚类结果。


# K-means算法运行过程
#  程序代码如下：
#  程序的控制部分：
#    首先从文件读入数据，并将其存储在Numpy的数组对象中，
#    指定聚类个数，与，最大迭代次数，
#    调用kmeans聚类函数，得到聚类结果
#    将聚类结果以图的形式展示出来。

def main():
    ## step 1: load dataset
    print("step 1: loading dataset...")
    dataSet=[]
    dataSetFile=open("180320-testSet.txt")
