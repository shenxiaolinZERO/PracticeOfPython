# !/usr/bin/env python
# encoding: utf-8
__author__ = 'Administrator'

#调试的基本概念
# 什么是程序调试
#  将编制的程序投入实际运行前，用手工或编译程序等方法进行测试，修正语法错误和逻辑错误的过程。

# 调试--------------------与测试------的区别
#  定位错误，修改程序       #  找出软件存在的错误
#  未知条件，结局不可预知    #  已知条件，结局可预知
#  对象：代码              #  对象：文档、代码等
#  不能计划，进度不可度量    #  需要计划，进度可以度量


# 程序中常见错误
#  编译错误
#     程序在编译过程中出现的错误。它是由于不正确的编写代码而产生的如非法使用或丢失关键字、遗漏了某些必需的标点符号、函数调用缺少参数或传递了不匹配的参数等等。
#     例：关键字书写错误  printf("There is a bug!")

#  运行时错误
#     应用程序在运行期间执行了非法操作或某些操作失败，如打开的文件未找到、磁盘空间不足、网络连接断开、除法中除数为零等。
#     例：列表下标越界是典型的运行时错误

#  逻辑错误
#     应用程序未按照预期的方式运行时所产生的错误。一般来讲，这不是属于语法层次的错误，应用程序可以执行，但是得不到正确的预期结果。

# 调试的类别
#  静态调试
#  动态调试
#    分段隔离
#    设置断点
#      断点是调试应用程序时经常使用的一种工具。
#      使用断点前必须要在代码中插入断点。


#-----------Pdb调试器
# pdb调试
#  pdb 是 python 自带的一个包，为 python 程序提供了一种交互的源代码调试功能，主要特性包括
#    设置断点
#    单步调试
#    进入函数调试
#    查看当前代码
#    查看栈片段
#    动态改变变量的值

# 模拟bmi计算的程序
#....
#加入断点
#开始运行调试
#  if  gender  !=  ‘male’  and  gender  !=‘female’:指示当前的语句
#  （pdb）等待调试指令
# pdb的指令很丰富，输入h指令可以查看指令的使用方法。下面简单介绍常用指令：
#.......
#.........


# 工具及其他

# Python Shell Debugger
#  为了使得调试更加方便和友好，Python提供了可交互的IDLE调试器。
#  在“Python Shell”窗口中单击“Debugger”菜单
#  Debug Control窗口
#    Go：运行到下一个断点处
#    Step：运行一步
#    Over：运行当前函数，但不进入函数体
#    Out：跳出当前函数
#    Quit：退出
#  IDLE源代码窗口
#    当前行右键单击
#    Set Breakpoint
#    Clear Breakpoint
#.......
#.........

# 一些技巧
#  查看调用函数体内部的函数执行情况
#    在函数体内部设置断点
#    在函数调用语句设置断点
#  查看重复执行的函数体或者语句
#    运行到某一次循环时，增加断点
#    需要查看的某次循环结束时，清除断点
#    无需等到全部循环结束（比如500次）


# 其他工具-Wing IDE
# 其他工具-Komodo IDE
# 其他工具-pyCharm
