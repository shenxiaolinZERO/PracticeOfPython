# !/usr/bin/env python
# encoding: utf-8
__author__ = 'Administrator'
#Python语言中字符串的格式化方法。Python提供两种字符串格式方法。
# 一种类似C语言的格式化方法，使用；
# 另一种采用format()方法，Python推荐使用这种方法。此法能力更强、更直观、更容易格式化组合数据类型。

#format()方法格式化字符串类型，基本使用格式：
#<模板字符串>.format(<逗号分隔的参数>)
#<模板字符串>由一系列的槽组成，用来控制修改字符串中嵌入值出现的位置，其基本思想是将format()方法的<逗号分隔的参数>中的参数按照序号关系替换到<模板字符串>的槽中。
#槽用大括号（{}）表示，如果大括号中没有序号，则按照出现顺序替换。
strFormat="{}:计算机{}的CPU占用率为：{}%。".format("2018-02-10","Python",10)
print("格式化结果为：",strFormat) #格式化结果为： 2018-02-10:计算机Python的CPU占用率为：10%。

#format()方法可以非常方便地连接不同类型的变量或内容，如果需要输出大括号，采用{{来表示{，采用}}来表示}，例如：

yuanzhoulv1="{}{}{}".format("圆周率是",3.1415926,"...")
print("输出圆周率1：",yuanzhoulv1) #输出圆周率1： 圆周率是3.1415926...

yuanzhoulv2="圆周率{{{1}{2}}}是{0}".format("无理数",3.1415926,"...")
print("输出圆周率2",yuanzhoulv2)#输出圆周率2 圆周率{3.1415926...}是无理数

s="圆周率{{{1}{2}}}是{0}"  # {}大括号本身是字符串的一部分
print("字符串本身为：",s) #字符串本身为： 圆周率{{{1}{2}}}是{0}
sf=s.format("无理数",3.1415926,"...") #当调用format()时解析大括号
print("格式化后为：",sf) #格式化后为： 圆周率{3.1415926...}是无理数

#format()方法中<模板字符串>的槽除了包括参数序号，还可以包括格式控制信息。此时，槽的内部样式如下：
#{<参数序号>:<格式控制标记>}
#其中，<格式控制标记>用来控制参数显示时的格式，<格式控制标记>包括：<填充><对齐><宽度>,<.精度><类型> 6个字段，这些字段都是可选的，可以组合使用。
#

s="Python"
sf1="{0:30}".format(s) #(默认采用空格填充)
print("sf1为：",sf1) #sf1为：'Python                      '

sf2="{0:>30}".format(s)
print("sf2为：",sf2) #sf2为：'                         Python'

sf3="{0:*^30}".format(s)
print("sf3为：",sf3) #sf3为： ************Python************

sf4="{0:-^30}".format(s)
print("sf4为：",sf4) #sf4为： ------------Python------------

sf5="{0:3}".format(s)
print("sf5为：",sf5) #sf5为： Python

#<格式控制标记>中逗号（，）用于显示数字的千位分隔符，例如：
strF1="{0:-^20,}".format(1234567890)
print("逗号显示数字的千位分隔符：",strF1) #逗号显示数字的千位分隔符： ---1,234,567,890----

strF2="{0:-^20}".format(1234567890)
print("对比输出，无逗号。",strF2) #对比输出，无逗号。 -----1234567890-----

strF3="{0:-^20,}".format(12345.67890)
print("含小数点的操作：",strF3) #含小数点的操作： ----12,345.6789-----

#<.精度>表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度：
strF4="{0:.2f}".format(12345.67890)
print("保留两位小数：",strF4) #保留两位小数： 12345.68

strF5="{0:H^20.3f}".format(12345.67890)
print("格式化并保留3位小数：",strF5) #格式化并保留3位小数： HHHHH12345.679HHHHHH

strF6="{0:.4}".format("Python")
print("取4个字母：",strF6) #取4个字母： Pyth

#<类型>表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6种：
# b:输出整数的二进制方式；
# c:输出整数对应的Unicode字符
# d:输出整数的十进制方式
# o:输出整数的八进制方式
# x:输出整数的小写十六进制方式
# X:输出整数的大写十六进制方式

stringF="{0:b},{0:c},{0:o},{0:x},{0:X}".format(425)
print("<类型>格式化输出为：",stringF) #<类型>格式化输出为： 110101001,Ʃ,651,1a9,1A9

#对于浮点数类型，输出格式包括4种：
# e:输出浮点数对应的小写字母e的指数形式；
# E:输出浮点数对应的大写字母E的指数形式；
# f:输出浮点数的标准浮点形式；
# %:输出浮点数的百分形式。

#浮点数输出时尽量使用<.精度>表示小数部分的宽度，有助于更好控制输出格式。
s1="{0:e},{0:E},{0:f},{0:%}".format(3.14)
print(s1)#3.140000e+00,3.140000E+00,3.140000,314.000000%
s2="{0:.2e},{0:.2E},{0:.2f},{0:.2%}".format(3.14)
print(s2)#3.14e+00,3.14E+00,3.14,314.00%
