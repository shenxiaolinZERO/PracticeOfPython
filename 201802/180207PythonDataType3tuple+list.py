# !/usr/bin/env python
# encoding: utf-8
__author__ = 'Administrator'
#先前介绍的数字类型、字符串类型，他们都只是代表一个元素。
#tuple 元组类型：
#元组的概念：元组是包含多个元素的类型，元素之间用逗号分割。
#例如：t1=123,456,"hello"
#元组可以是空的，t2=()
#元组包含一个元素：t3=123,
#元组外侧可以使用括号，也可以不使用。
#元组有3个特点：
#1）元组中元素可以是不同类型。例如：t3=123,456,("hello","中国")
#2）元组中各元素存在先后关系，可以通过索引访问元组中元素。例如：t3[0]
#3）元组定义后不能更改，也不能删除【因此程度的代码会更安全，但灵活性不高。而列表类型list灵活性高】。例如：t3[0]=456
#另：
#1.与字符串类型类似，可以通过索引区间来访问元组中部分元素。例如：t[1:]
#2.与字符串一样，元组之间可以使用 + 号和 * 号进行计算。

#列表类型与元组类型类似，都表示一系列元素。
#列表的概念：
#列表（list）是有序的元素集合
#列表中元素可以通过索引访问单个元素，例如：
a=[0,1,2,3,4,5,6,7,8,9]
print("列表元素为：",a) #列表元素为： [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#列表与元组类似：
# 列表中每个元素类型可以不一样
# 访问列表中元素时可以采用索引形式
#列表与元组不同：
# 列表的大小没有限制可随时修改

#列表的一些操作-1（与字符串相似）
# <seq>+<seq> ：连接两个序列
# <seq>*<整数类型>：对序列进行整数次重复
# <seq>[<整数类型>]：索引元素中的元素
# len(<seq>) ：返回序列中的元素个数
# <seq>[<整数类型>:<整数类型>]：取序列的一个子序列
# for <var> in <seq> : 对序列进行循环列举
# <expr> in <seq> : 成员检查，判断<expr> 这个元素是否在序列中

###举个栗子：
vlist1=[0,1,2,3,4]
print("扩展该列表：",vlist1*2) #扩展该列表： [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
print("返回列表的长度：",len(vlist1[2:])) #返回列表的长度： 3
for i in vlist1[:3]:
    print("循环遍历并打印列表中的元素：",i)
    # 循环遍历并打印列表中的元素： 0
    # 循环遍历并打印列表中的元素： 1
    # 循环遍历并打印列表中的元素： 2
print("判断一个元素是否在列表中：",(2 in vlist1)) #判断一个元素是否在列表中： True

#列表的一些操作-2
# <list>.append(x):将元素x 增加到列表的最后
# <list>.sort():将列表元素排序
# <list>.reverse():将列表元素反转
# <list>.index():返回第一次出现元素x的索引值
# <list>.insert(i,x):在位置i处插入新元素x
# <list>.count(x):返回元素x 在列表中的数量
# <list>.remove(x):删除列表中第一次出现的元素x
# <list>.pop(i):取出列表中位置i 的元素，并删除它

vlist2=[0,1,2,3,4]
vlist2.append('Python')
print("增加元素后的列表为：",vlist2) #增加元素后的列表为： [0, 1, 2, 3, 4, 'Python']
vlist2.reverse()
print("反转列表元素：",vlist2) #反转列表元素： ['Python', 4, 3, 2, 1, 0]
print("第一次出现元素3的索引值:",vlist2.index(3)) #第一次出现元素3的索引值: 2
print("将位置2的元素取出并删除：",vlist2.pop(2)) #将位置2的元素取出并删除： 3
print("最终列表的结果为：",vlist2)  #最终列表的结果为： ['Python', 4, 2, 1, 0]

#列表的操作
#字符串可以通过split()函数<默认以空格分割>，将字符串拆分成一个列表，例如：
str="Python is an excellent language!"
list=str.split()
print("字符串拆分为列表，结果为：",list) #字符串拆分为列表，结果为： ['Python', 'is', 'an', 'excellent', 'language!']

